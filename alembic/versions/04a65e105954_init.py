"""init

Revision ID: 04a65e105954
Revises: 
Create Date: 2023-03-28 16:53:23.203773

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects.postgresql import UUID

sa.UUID = UUID
sa.Uuid = UUID

# revision identifiers, used by Alembic.
revision = '04a65e105954'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('theories',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('study_time', sa.Time(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('chapters_theory',
    sa.Column('name', sa.VARCHAR(length=64), nullable=True),
    sa.Column('theory_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['theory_id'], ['theories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tests',
    sa.Column('completion_time', sa.Time(), nullable=True),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('creator_id', sa.Uuid(), nullable=True),
    sa.Column('count_attempts', sa.Integer(), nullable=True),
    sa.Column('theory_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.CheckConstraint('count_attempts > 0', name='attempts_check'),
    sa.ForeignKeyConstraint(['creator_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['theory_id'], ['theories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('questions',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('complition_time', sa.Time(), nullable=True),
    sa.Column('weight', sa.Integer(), server_default='1', nullable=True),
    sa.Column('test_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.CheckConstraint('weight > 0', name='weight_check'),
    sa.ForeignKeyConstraint(['test_id'], ['tests.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('results_tests',
    sa.Column('user_id', sa.Uuid(), nullable=True),
    sa.Column('test_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['test_id'], ['tests.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('answers',
    sa.Column('mark', sa.Integer(), nullable=True),
    sa.Column('text_answer', sa.Integer(), nullable=True),
    sa.Column('complition_time', sa.Time(), nullable=False),
    sa.Column('result_test_id', sa.Uuid(), nullable=True),
    sa.Column('question_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.ForeignKeyConstraint(['result_test_id'], ['results_tests.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('pointers_to_answer',
    sa.Column('chapter_id', sa.Uuid(), nullable=True),
    sa.Column('question_id', sa.Uuid(), nullable=True),
    sa.Column('start', sa.Integer(), nullable=False),
    sa.Column('end', sa.Integer(), nullable=False),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.CheckConstraint('"end" > 0', name='end_check'),
    sa.CheckConstraint('start > 0', name='start_check'),
    sa.ForeignKeyConstraint(['chapter_id'], ['chapters_theory.id'], ),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('questions_choice',
    sa.Column('question_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('questions_input_answer',
    sa.Column('correct_answer', sa.String(), nullable=False),
    sa.Column('k_misspell', sa.Float(), nullable=False),
    sa.Column('question_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.CheckConstraint('k_misspell >= 0 AND k_misspell <= 1', name='misspel_check'),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('questions_not_check',
    sa.Column('question_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['question_id'], ['questions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('answers_test',
    sa.Column('text', sa.String(), nullable=False),
    sa.Column('correct', sa.Boolean(), nullable=False),
    sa.Column('question_choice_id', sa.Uuid(), nullable=True),
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),
    sa.Column('updated_at', sa.TIMESTAMP(), nullable=False),
    sa.ForeignKeyConstraint(['question_choice_id'], ['questions_choice.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('answer_user_by_answer_test',
    sa.Column('answer_id', sa.Uuid(), nullable=True),
    sa.Column('answer_test_id', sa.Uuid(), nullable=True),
    sa.ForeignKeyConstraint(['answer_id'], ['answers.id'], ),
    sa.ForeignKeyConstraint(['answer_test_id'], ['answers_test.id'], )
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('answer_user_by_answer_test')
    op.drop_table('answers_test')
    op.drop_table('questions_not_check')
    op.drop_table('questions_input_answer')
    op.drop_table('questions_choice')
    op.drop_table('pointers_to_answer')
    op.drop_table('answers')
    op.drop_table('results_tests')
    op.drop_table('questions')
    op.drop_table('tests')
    op.drop_table('chapters_theory')
    op.drop_table('users')
    op.drop_table('theories')
    # ### end Alembic commands ###
